{
	"info": {
		"_postman_id": "b208abff-243a-412a-9267-2b45a6a36a9f",
		"name": "Chat",
		"description": "# Chat Message API Documentation\n\n## Overview\n\nThe **Chat Message API** allows users to send messages, retrieve chat history, and mark messages as read. The API uses **Laravel** and **Pusher** for real-time messaging.\n\n## Authentication\n\nAll endpoints require authentication via **Bearer Token**.\n\n---\n\n## Endpoints\n\n### 1\\. Send Message\n\n**Endpoint:** `POST /api/chat/send`\n\n**Description:** Sends a message from one user to another.\n\n**Request Body:**\n\n**Response:**\n\n---\n\n### 2\\. Get Chat History\n\n**Endpoint:** `GET /api/chat/{senderId}/{receiverId}`\n\n**Description:** Retrieves the chat history between two users.\n\n**Response:**\n\n---\n\n### 3\\. Mark Message as Read\n\n**Endpoint:** `PUT /api/chat/read/{messageId}`\n\n**Description:** Marks a specific message as read.\n\n**Response:**\n\n---\n\n## Error Handling\n\nAll errors follow this format:\n\n### Common Errors\n\n| Error Code | Description |\n| --- | --- |\n| 400 | Bad Request - Invalid input |\n| 401 | Unauthorized - Invalid token |\n| 404 | Not Found - Resource does not exist |\n| 500 | Internal Server Error |\n\n---\n\n## PUSHER Integration\n\n**Listening for Messages:**\n\n---\n\n## Notes\n\n- This API supports **real-time messaging** using **Laravel Echo & Pusher**.\n    \n- Ensure WebSocket connections are properly configured for optimal performance.\n    \n\nðŸš€ **This documentation ensures that any developer can quickly integrate and use the Chat Message API efficiently.**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43162929",
		"_collection_link": "https://realstate-9486.postman.co/workspace/RealState-Workspace~3dd81080-ab77-4cd6-8600-a6a9abe1bc5f/collection/43162929-b208abff-243a-412a-9267-2b45a6a36a9f?action=share&source=collection_link&creator=43162929"
	},
	"item": [
		{
			"name": "Get Chat History",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/chat/history/2/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"chat",
						"history",
						"2",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send a Message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('object');",
							"    ",
							"    const requiredFields = [\"sender_id\", \"receiver_id\", \"message_text\", \"message_type\", \"attachment_url\", \"updated_at\", \"created_at\", \"message_id\"];",
							"    requiredFields.forEach(field => {",
							"        pm.expect(responseData.data).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Sender_id, receiver_id, and message_id are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.sender_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Sender_id should be a non-negative integer\");",
							"    pm.expect(responseData.data.receiver_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Receiver_id should be a non-negative integer\");",
							"    pm.expect(responseData.data.message_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Message_id should be a non-negative integer\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3AtYWR2aXNlci5jb20vcmVhbHN0YXRlcHJvamVjdC9wdWJsaWMvYXBpL2F1dGgvbG9naW4iLCJpYXQiOjE3NDIzNzk4NTEsImV4cCI6MTc0MjQ2NjI1MSwibmJmIjoxNzQyMzc5ODUxLCJqdGkiOiJ2dEVKN3gybTlCODZzVTFwIiwic3ViIjoiNTAiLCJwcnYiOiJiOTEyNzk5NzhmMTFhYTdiYzU2NzA0ODdmZmYwMWUyMjgyNTNmZTQ4In0.p0C5W7wxrCDQEMjT_EffeoEs7o7K2UeigapheeeMjIc",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"sender_id\": 1,\n  \"receiver_id\": 1,\n  \"message_text\": \"Hello, how are you? UBUNTU IS WELCOMING !?\",\n  \"attachment_url\": \"https://laravel.com/docs/12.x/installation\",\n  \"message_type\": \"text\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/chat/send",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"chat",
						"send"
					]
				}
			},
			"response": []
		},
		{
			"name": "Mark Message as Read",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status, message, and data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('message');",
							"    pm.expect(responseData).to.have.property('data');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Data is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/chat/mark-as-read/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"chat",
						"mark-as-read",
						"1"
					]
				}
			},
			"response": []
		}
	]
}